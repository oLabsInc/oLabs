!function (e) { function t(n) { if (r[n]) return r[n].exports; var o = r[n] = { exports: {}, id: n, loaded: !1 }; return e[n].call(o.exports, o, o.exports, t), o.loaded = !0, o.exports } var r = {}; return t.m = e, t.c = r, t.p = "", t(0) }([function (e, t) { if ("undefined" == typeof AFRAME) throw new Error("Component attempted to register before AFRAME was available."); AFRAME.registerComponent("crawling-cursor", { dependencies: ["raycaster"], schema: { target: { type: "selector" }, offset: { type: "number", default: .05 } }, multiple: !1, init: function () { var e = this.el, t = this.data; if (null === t.target) { var r = document.querySelector("a-cursor"); if (null === r) return void console.warn("Please put a-cursor in a document"); t.target = r } e.addEventListener("raycaster-intersection", function (e) { function r(e) { for (var r = 0, n = e.length; r < n; r++)if (t.target !== e[r].object.el && !e[r].object.el.classList.contains("ignore-ray")) return e[r]; return null } var n = r(e.detail.intersections); if (n) { var o = n.object.matrixWorld; o.setPosition(new THREE.Vector3(0, 0, 0)); var a = n.face.normal.clone().applyMatrix4(o).normalize(), i = (new THREE.Vector3).addVectors(n.point, a); t.target.object3D.lookAt(i); var c = (new THREE.Vector3).addVectors(n.point, a.multiplyScalar(t.offset)); t.target.setAttribute("position", c) } }), setInterval(function () { e.components.raycaster.refreshObjects() }, 100) } }) }]);